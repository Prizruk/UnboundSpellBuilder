@page "/spellbuilder"
@using static UnboundSpellBuilder.Pages.SpellClasses
@inject HttpClient Http


<PageTitle>Spell Builder</PageTitle>

@{
    allowedLevel = skillBonus <= 10 ? skillBonus/2 : Math.Min(6,(skillBonus-2)/2);
    minLevel = Math.Max(spell.pointcost - 3 - spell.pointBonus,0);
    var efftableWidth = Math.Floor(100.0/7*(spell.level+1)) + "%";
    var modtableWidth = Math.Floor(100.0/7*(allowedLevel+1)) + "%";
    var showInfo = showMode == 0 ? "d-block" : "d-none";
    var showEffects = showMode == 1 ? "d-block" : "d-none";
    var showSpellMods = showMode == 2 ? "d-block" : "d-none";
}

<h1>Spell Builder</h1>

<div class="effectChoice p-3 @showEffects" id="effectChoice">
    @if (effects != null)
    {
        <table width="@efftableWidth" style="table-layout: fixed;">
        <tr style="vertical-align: top;">
            @for(int i = 0; i <= spell.level;i++)
            {
                <td>
                <table style="width: 100%; table-layout: fixed;">
                <tr><th style="text-align: center;">@i</th></tr>
                @foreach(var effect in effects)
                {
                    @if(IsEligeble(effect,i))
                    {
                        <tr><td>
                        <button class="btn btn-primary" style="margin: 1px; display: block; width: 100%" @onclick="(args)=> AddEffect(args, effect.name)"><Tooltip Text=@effect.help>@effect.name</Tooltip></button>
                        </td></tr>
                    }
                }
                </table>
                </td>
            }
        </tr>
        </table>
    }
    <br><br><br>
    <button class="btn btn-primary" @onclick="(args)=>{showMode = 0;}"><Tooltip Text="Cancel adding an effect">Cancel</Tooltip></button>

</div><br>
<div class="spellmodChoice p-3 @showSpellMods" id="spellmodChoice">
    @if (spellmods != null)
    {
        <table width="@modtableWidth" style="table-layout: fixed;">
        <tr style="vertical-align: top;">
            @for(int i = 0; i <= allowedLevel; i++)
            {
                <td>
                <table style="width: 100%; table-layout: fixed;">
                <tr><th style="text-align: center;">@i</th></tr>
                @foreach (var spellmod in spellmods)
                {
                    @if(IsEligeble(spellmod,i))
                    {
                        <tr><td>
                        <button class="btn btn-primary" style="margin: 1px; display: block; width: 100%" @onclick="(args)=> AddSpellModifier(args, spellmod.name)"><Tooltip Text=@spellmod.help>@spellmod.name</Tooltip></button>
                        </td></tr>
                    }            
                }
                </table>
                </td>
            }
        </tr>
        </table>
    }
    <br><br><br>
    <button class="btn btn-primary" @onclick="(args)=>{showMode = 0;}"><Tooltip Text="Cancel adding a spell modifier">Cancel</Tooltip></button>
</div>
<div class="spellInfo p-3 @showInfo" id="spellInfo">
    @if(effects == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table" style="table-layout: fixed ; width: 100%;">
            <thead>
                <tr>
                    <th>Spell Description</th>
                    <th>Spell Keywords</th>
                    <th>Spell Stats</th>
                    <th>Character Stats</th>
                </tr>
            </thead>
            <tbody>
                <tr>                    
                    <td>
                        <b>School:</b> @spell.school<br>
                        <b>Level:</b> @spell.level<br>
                        @if(spell.effects.Count > 1)
                        {
                            @foreach (var effect in spell.effects)
                            {
                                <b>Duration (@effect.name):</b> @ReturnDuration(effect.duration) <br>
                            }
                        }
                        @if(spell.effects.Count == 1)
                        {
                            <b>Duration:</b> @ReturnDuration(@spell.effects[0].duration) <br>
                        }
                        @if(spell.effects.Count == 0)
                        {
                            <b>Duration:</b> @spell.duration <br>
                        }
                        <b>Range:</b> @ReturnRange()<br>
                        <b>Target:</b> @ReturnTarget()<br>
                        <b>Spellpoints:</b> @spell.pointcost / @spell.pointmax<br>
                        <b>Mana:</b> @spell.manacost<br>
                        <b>Cast DC:</b> @spell.castDC<br>
                        <hr>
                        @foreach(string effect in spell.effect)
                        {
                            @effect<br>
                        }
                        
                    </td>
                    <td>
                        @foreach (var spellmod in spell.modifiers)
                        {
                            <button class="btn btn-primary" style="margix: 1px; padding: 1px; margin-right: 3px;" @onclick="(args)=> RemoveSpellModifier(args, spellmod.name)"><Tooltip Text="Remove Modifier">x</Tooltip></button> @spellmod.GetName()<br>
                        }
                        @if(spell.modifiers.Count > 0)
                        {
                            <br>
                        }
                        @foreach(var effect in spell.effects)
                        {
                            <button class="btn btn-primary" style="margix: 1px; padding: 1px; margin-right: 3px;" @onclick="(args)=> RemoveEffect(args, effect.name)"><Tooltip Text="Remove Effect">x</Tooltip></button> @effect.GetName()<br>
                        }                                    
                    </td>                    
                    <td>
                        <table align="left" style="width: 100%;">
                            <tr>
                                <td>Spell School:</td>
                                <td>
                                    <select @bind="spell.school" disabled="@blockSelection">
                                        <option value=""></option>
                                        <option value="Universal">Universal</option>
                                        <option value="Abjuration">Abjuration</option>
                                        <option value="Conjuration">Conjuration</option>
                                        <option value="Destruction">Destruction</option>
                                        <option value="Divination">Divination</option>
                                        <option value="Enchantment">Enchantment</option>
                                        <option value="Illusion">Illusion</option>
                                        <option value="Ordinary">Ordinary</option>
                                        <option value="Necromancy">Necromancy</option>
                                        <option value="Restoration">Restoration</option>
                                        <option value="Transmutation">Transmutation</option>
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td>EMM bonus:</td><td><input style="width: 25%;" type="number" name="EMMB" min="0" max="99" @bind="@EMMB" @oninput="@((e) => {UpdateParams((string)e.Value,3);})"></td>
                            </tr>
                            <tr>
                                <td>Spell Level:</td><td><input style="width: 25%;" type="number" name="level" min="@minLevel" max="@allowedLevel" @bind="@spell.level" @oninput="@((e) => {UpdateParams((string)e.Value,4);})"></td>
                            </tr>
                        </table>
                        <br>
                        <input type="checkbox" name="personalCheck" style="margin-right: 3px;" @bind="@isPersonal" @oninput="@((e) => {UpdateBools(e.Value,2);})" > <Tooltip Text="Spell can only affect the caster">Personal</Tooltip>
                    </td>
                    <td> 
                        <div>
                            <table align="left" style="width: 100%;">
                                <tbody>
                                <tr>
                                    <td><Tooltip Text="Your MAG value, not mod">MAG:</Tooltip></td><td><input style="width: 25%;" type="number" name="MAG" min="0" max="99" @bind="@MAGvalue" @oninput="@((e) => {UpdateParams((string)e.Value,1);})"></td>
                                </tr>
                                <tr style="display:none">
                                    <td><Tooltip Text="Your THM value, not mod">THM:</Tooltip></td><td><input style="width: 25%;" type="number" name="THM" min="0" max="99" @bind="@THMvalue" @oninput="@((e) => {UpdateParams((string)e.Value,2);})"></td>
                                </tr>
                                <tr><td><Tooltip Text="Appropriate magic skill proficiency">Skill:</Tooltip></td>
                                    <td>
                                        <select @bind="skillBonus">
                                            <option value=0>None</option>
                                            <option value=2>Apprentice</option>
                                            <option value=4>Journeyman</option>
                                            <option value=6>Professional</option>
                                            <option value=8>Master</option>
                                            <option value=10>Grandmaster</option>
                                            <option value=12>Grandmaster+</option>
                                            <option value=14>Grandmaster++</option>
                                            <option value=16>Grandmaster+++</option>
                                        </select>
                                    </td>
                                </tr>
                                </tbody>
                            </table><br>           
                            <table align="left">
                                <tr><th></th><th>Features:</th></tr>
                                <tr>
                                    <td><input type="checkbox" style="margin-right: 3px;" name="destructiveCheck" @bind="@hasDestructive" @oninput="@((e) => {UpdateBools(e.Value,1);})" ></td><td><Tooltip Text="Increases damage die of all destructive spells by one step">Destructive Spells</Tooltip></td>
                                </tr>
                            </table>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    }
    <br><br>
    @if(spell.school != "" && skillBonus > 0)
    {
    <button class="btn btn-primary" style="margin: 1px;" @onclick="(args)=>{showMode = 2;}"><Tooltip Text="Add an Spell Modifier">Add Modifier</Tooltip></button>
        @if (spell.effects.Count == 0 || SpellHasEffectNonUnique() || spell.effects.Count < spell.level)
        {
            <button class="btn btn-primary" style="margin: 1px;" @onclick="(args)=>{showMode = 1;}"><Tooltip Text="Add an Effect or Condition to the spell">Add Effect</Tooltip></button>
        }
    }
    @if(spell.school == "" || skillBonus == 0)
    {
        if(spell.school == "" && skillBonus > 0)
        {
            <div>Choose the Spell School</div>
        }            
        if(spell.school != "" && skillBonus == 0)
        {
            <div>Choose the Skill level</div>
        }            
        if(spell.school == "" && skillBonus == 0)
        {
            <div>Choose the Spell School and Skill level</div>
        }            

    }
        
    <br><br>
    <button class="btn btn-primary" @onclick="(args) => ClearSpell(args)">Clear Spell</button>
</div>


@code 
{
    private List<EffectKeyword> effects;
    private List<SpellModifier> spellmods;
    private Spell spell = new Spell();
    [Parameter]
    public int showMode { get; set; }    
    [Parameter]
    public int allowedLevel {get;set;}
    [Parameter]
    public int minLevel {get;set;}
    public bool blockSelection {get;set;}
    public bool hasDestructive { get; set; }
    public bool isPersonal { get; set; }
    public int MAGvalue { get; set;} = 10;
    public int THMvalue { get; set;} = 10;
    public int EMMB{ get; set;} = 0;
    public int skillBonus{get;set;} = 0;
    protected override async Task OnInitializedAsync()
    {
        showMode = 0;        
        EffectKeyword[]? tempEffects = await Http.GetFromJsonAsync<EffectKeyword[]>("sample-data/effects.json");
        effects = new List<EffectKeyword>(tempEffects);
        SpellModifier[]? tempSpellMods = await Http.GetFromJsonAsync<SpellModifier[]>("sample-data/spellmodifiers.json");
        spellmods = new List<SpellModifier>(tempSpellMods);
        effects.Sort((p,q) => p.name.CompareTo(q.name));
        spellmods.Sort((p, q) => p.name.CompareTo(q.name));
    }

    public bool IsEligeble(EffectKeyword effect, int i)
    {
        if (spell.school.Trim() == "") return false;
        if (effect.level != i) return false;
        if (spell.effects.Count >= Math.Max(spell.level,1) && (effect.unique || spellHasEffect(effect.name) == -1)) return false;
        if (spell.school == "Universal")
        {
            if (effect.level > spell.level) return false;
        }
        else
        {
            int ss = effect.school.IndexOf(spell.school);
            if (ss < 0) return false;
            int se = effect.school.IndexOf(";",ss);
            if (se < 0) se = effect.school.Length;
            int lv = System.Convert.ToInt32(effect.school.Substring(se-1,1));
            if (lv > spell.level) return false;
        }
        if(effect.GetCost(spellHasEffectAmmount(effect.name)+1,false,spell.level) > spell.pointmax-spell.pointcost)
            return false;
        if(effect.unique && spellHasEffect(effect.name) > -1)
            return false;
        return true;
    }

    public bool IsEligeble(SpellModifier effect, int i)
    {
        if (spell.school.Trim() == "") return false;
        if (effect.level != i) return false;
        if (effect.name == "Invigorate" && spell.level == 0) return false;
        if (effect.school.Contains("Universal") || spell.school == "Universal")
        {
            if(effect.level > allowedLevel) return false;
        }
        else
        {
            int ss = effect.school.IndexOf(spell.school);
            if (ss < 0) return false;
            int se = effect.school.IndexOf(";",ss);
            int lv;
            if (se < 0) lv = System.Convert.ToInt32(effect.school.Last());
            else lv = System.Convert.ToInt32(effect.school.Substring(se-1,1));
            if (lv > allowedLevel) return false;
        }
        if(effect.GetCost(spellHasModifierAmmount(effect.name)+1,false, spell.level) > spell.pointmax-spell.pointcost)
            return false;
        if(effect.unique && spellHasModifier(effect.name) > -1)
            return false;
        return true;
    }

    public string ReturnDuration(int durationType)
    {
        string duration = "";
        int EMM = Math.Max((MAGvalue-10)/2 + EMMB,1);
        if (durationType >= 10)
        {
            durationType -= 10;
            duration = "Sustained + ";
        }
        switch(durationType)
        {
            case -5: duration = "Sustained"; break;
            case -4: duration = "Sustained + Special"; break;
            case -3: duration = "Special"; break;
            case -2: duration = "Until the action is complete"; break;
            case -1: duration += "?"; break;
            case 0: duration += "Instant"; break;
            case 1: duration += "1 round"; break;
            case 2: duration += EMM + " rounds"; break;
            case 3: duration += EMM + " minutes"; break;
            case 4: duration += EMM*10 + " minutes"; break;
            case 5: duration += EMM + " hours"; break;
            case 6: duration += EMM + " days"; break;
            case 7: duration += EMM + " weeks"; break;
            case 8: duration += EMM + " months"; break;
            case 9: duration += EMM + " years"; break;
            default: if(durationType>=10) duration = "semi-permanent"; else duration = "unknown"; break;
        }
        return duration;
    }

    public string ReturnRange()
    {
        string range = "";
        double EMM = (MAGvalue-10)/2 + EMMB;
        double value = ReturnRangeNumber();
        switch(spell.rangeType)
        {
            case -1: range = "Personal"; break;
            case 0: range = "Touch"; break;
            case 1: range = "Reach (" + value + "ft.)"; break;
            case 2: range = "Close (" + value + "ft.)"; break;
            case 3: range = "Short (" + value + "ft.)"; break;
            case 4: range = "Medium (" + value +"ft.)"; break;
            case 5: range = "Long ("+ value +"ft.)"; break;
            case 6: range = "Very Long("+ value +")"; break;
            default: range = "?"; break;
        }
        return range;
    }

    public double ReturnRangeNumber()
    {
        double range = 0;
        double EMM = (MAGvalue-10)/2 + EMMB;
        switch(spell.rangeType)
        {
            case 0: range = 5; break;
            case 1: range = 5*(1+spellHasModifierAmmount("Reach")); break;
            case 2: range = (4 + Math.Floor(EMM/2))*5; break;
            case 3: range = (4+EMM)*5; break;
            case 4: range = (10+EMM)*10; break;
            case 5: range = (10+EMM)*40; break;
            case 6: range = (5+EMM)*100; break;
            default: range = 0; break;
        }
        return range;
    }

    public string ReturnTarget()
    {
        string target = "";
        double EMM = (MAGvalue-10)/2 + EMMB;
        int dimB = spellHasModifierAmmount("Dimensions");
        switch(spell.targetType)
        {
            case -1: target = "Personal"; break;
            case 0: target = "Single"; break;
            case 1: target = (10*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + "ft. Cone"; break;
            case 2: target = (5*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + "ft. Blast"; break;
            case 3: target = (15*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + "ft. Line"; break;
            case 4: target = (spell.level+spell.lvlBonus+dimB+1)*(spellHasModifierAmmount("Cube")) + " of 5ft. Cubes"; break;
            case 5: target = (5*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + "ft. Burst"; break;
            case 6: target = (5*(EMM+EMMB)*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + "ft. long " + (5*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + "ft. high Wall"; break;
            case 7: target = (5*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + " wide " + (15*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + "ft. tall Geyser"; break;
            case 8: target = (10*(Math.Max(spell.level,1)+spell.lvlBonus+dimB)) + "ft. Geyser"; break;
            case 9: target = (2*(Math.Max(spell.level,1)+spell.lvlBonus)) + " additional targets within " + Math.Ceiling(ReturnRangeNumber()/10)*5 +"ft. of the first target"; break;
            default: break;
        }
        return target;
    }

    private string DoMult(string orig)
    {
        int startMult = orig.IndexOf("%mult%");
        int endMult = orig.IndexOf("%/mult%",startMult);
        string[]? forMult = orig.Substring(startMult,endMult-startMult).Replace("%mult%","").Replace("%/mult%","").Split(";");
        double answer = 1;
        foreach(string mult in forMult){
            answer *= System.Convert.ToDouble(mult.Replace(".",","));
        }
        orig = orig.Remove(startMult, endMult - startMult + "%/mult%".Length).Insert(startMult,Math.Floor(answer).ToString());
        return orig;
    }

    private string DoAdd(string orig)
    {
        int startAdd = orig.IndexOf("%add%");
        int endAdd = orig.IndexOf("%/add%",startAdd);
        string forCheck = orig.Substring(startAdd,endAdd-startAdd).Replace("%add%","").Replace("%/add%","");
        while (forCheck.Contains("%mult%")) forCheck = DoMult(forCheck);
        string[]? forAdd = forCheck.Split(";");
        int answer = 0;
        foreach(string add in forAdd){
            answer += System.Convert.ToInt32(add);
        }
        orig = orig.Remove(startAdd, endAdd - startAdd + "%/add%".Length).Insert(startAdd,answer.ToString());
        return orig;
    }

    private string DoQuad(string orig)
    {
        int startQuad = orig.IndexOf("%quad%");
        int endQuad = orig.IndexOf("%/quad%",startQuad);
        string[]? forQuad = orig.Substring(startQuad,endQuad-startQuad).Replace("%quad%","").Replace("%/quad%","").Split(";");
        double x = System.Convert.ToDouble(forQuad[3]);
        double answer = Math.Round(System.Convert.ToDouble(forQuad[0])*Math.Pow(x,2) + System.Convert.ToDouble(forQuad[1])*x + System.Convert.ToDouble(forQuad[2]));
        orig = orig.Remove(startQuad, endQuad - startQuad + "%/quad%".Length).Insert(startQuad,answer.ToString());
        return orig;
    }

    private string DoLevelDepend(string orig, int level)
    {
        string rem, kep;
        if (level == 0)
        {   rem = "l+"; kep = "l0"; }
        else
        {   rem = "l0"; kep = "l+"; }
        int rs,re;
        while (orig.Contains("%"+rem+"%"))
        {
            rs = orig.IndexOf("%"+rem+"%");
            re = orig.IndexOf("%/"+rem+"%")+("%/"+rem+"%").Length;
            orig = orig.Remove(rs,re-rs);
        }
        orig = orig.Replace("%"+kep+"%","").Replace("%/"+kep+"%","");
        return orig;
    }

    private string IncreaseDie(string die, int times)
    {   
        while(times > 0)
        {
            switch(die)
            {
                case "d4": die = "d6"; break;
                case "d6": die = "d8"; break;
                case "d8": die = "d10"; break;
                case "d10": die = "d12"; break;
                case "d12": if(hasDestructive) die = "2d6"; break;
                default: break;
            }
            times--;
        }
        return die;
    }

    private string DecreaseDie(string die, int times)
    {
        while(times > 0)
        {
            switch(die)
            {
                case "d6": die = "d4"; break;
                case "d8": die = "d6"; break;
                case "d10": die = "d8"; break;
                case "d12": die = "d10"; break;
                case "2d6": die = "d12"; break;
                default: break;
            }
            times--;
        }
        return die;
    }

    private string DoDam(string orig, int damBonus)
    {
        int ds = orig.IndexOf("%d%");
        int de = orig.IndexOf("%/d%",ds);
        string dice = orig.Substring(ds,de-ds).Replace("%d%","");
        if (damBonus > 0) dice = IncreaseDie(dice, damBonus);
        else if (damBonus < 0) dice = DecreaseDie(dice, -1*damBonus);        
        orig = orig.Remove(ds,de-ds+"%/d%".Length);
        if (dice == "2d6") orig = orig.Insert(ds,dice.Remove(0,1));
        else orig = orig.Insert(ds,dice);  
        if (orig.Contains("%dbm%"))
        {
            int dbs = orig.IndexOf("%dbm%");
            orig = orig.Remove(dbs,"%dbm%".Length);
            if (dice == "2d6") orig = orig.Insert(dbs,"2");
            else orig = orig.Insert(dbs,"1");
        }    
        return orig;
    }

    private string DoElemental(string orig)
    {
        int es = orig.IndexOf("%el%");
        int ee = orig.IndexOf("%/el%");
        string[] values = orig.Substring(es,ee-es).Replace("%el%","").Split(";");
        if (spellHas(new string[] {"Basic Energy","Uncommon Energy","Rare Energy","Ancient Energy","Necrotic","Poison","Psychic","Primal Energy","Shade","Astral","Holy","Unholy"}))
            orig = orig.Remove(es,ee-es+"%/el%".Length).Insert(es,values[0]);
        else
            orig = orig.Remove(es,ee-es+"%/el%".Length).Insert(es,values[1]);
        return orig;
    }

    private string DoElementalDamage(string orig)
    {
        string damage = "physical";
        if(spellHasModifier("Basic Energy") > -1)
            damage = "tier 1 elemental";
        if(spellHasModifier("Uncommon Energy") > -1)
            damage = "tier 2 energy";  
        if(spellHasModifier("Poison") > -1)
            damage = "poison 2";
        if(spellHasModifier("Rare Energy") > -1)
            damage = "tier 3 energy";    
        if(spellHasModifier("Necrotic") > -1)
            damage = "necrotic 3";
        if(spellHasModifier("Psychic") > -1)
            damage = "psychic 3";
        if(spellHasModifier("Ancient Energy") > -1)
            damage = "tier 4 elemental";  
        if(spellHasModifier("Primal Energy") > -1)
            damage = "primal 4";
        if(spellHasModifier("Shade") > -1)
            damage = "shade 4";
        if(spellHasModifier("Astral") > -1)
            damage = "astral 4";
        if(spellHasModifier("Holy") > -1)
            damage = "holy 4";
        if(spellHasModifier("Unholy") > -1)
            damage = "unholy 4";
        return orig.Replace("%eld%",damage);
    }

    private string DoMax(string orig)
    {
        int ms = orig.IndexOf("%max%");
        int me = orig.IndexOf("%/max%",ms);
        string[] options = orig.Substring(ms,me-ms).Replace("%max%","").Split(";");
        int value = System.Convert.ToInt32(options[0]) > System.Convert.ToInt32(options[1]) ? System.Convert.ToInt32(options[0]) : System.Convert.ToInt32(options[1]);
        orig = orig.Remove(ms,me-ms+"%/max%".Length).Insert(ms,value.ToString());
        return orig;
    }

    private string DoMin(string orig)
    {
        int ms = orig.IndexOf("%min%");
        int me = orig.IndexOf("%/min%",ms);
        string[] options = orig.Substring(ms,me-ms).Replace("%min%","").Split(";");
        int value = System.Convert.ToInt32(options[0]) < System.Convert.ToInt32(options[1]) ? System.Convert.ToInt32(options[0]) : System.Convert.ToInt32(options[1]);
        orig = orig.Remove(ms,me-ms+"%/min%".Length).Insert(ms,value.ToString());
        return orig;
    }

    private string DoPow(string orig)
    {
        int ps = orig.IndexOf("%pow%");
        int pe = orig.IndexOf("%/pow%",ps);
        string[] values = orig.Substring(ps,pe-ps).Replace("%pow%","").Split(";");
        double value = Math.Pow(System.Convert.ToDouble(values[0]),System.Convert.ToDouble(values[1]));
        orig = orig.Remove(ps,pe-ps+"%/pow%".Length).Insert(ps,value.ToString());
        return orig;
    }
    private string DoOption(string orig)
    {
        int os = orig.IndexOf("%opt%");
        int oe = orig.IndexOf("%/opt%");
        string optionResult = "(";
        string[]? optionParams = orig.Substring(os,oe-os).Replace("%opt%","").Split(";");
        int amm = System.Convert.ToInt32(optionParams[2]);
        string[]? var1 = optionParams[0].Split(":");
        var1[1] = var1[1].Replace("+",var1[0]);
        string[]? var2 = optionParams[1].Split(":");        
        var2[1] = var2[1].Replace("+",var2[0]);
        for (int i = 0; i < amm; i++)
        {
            optionResult += (System.Convert.ToInt32(var1[0])+(System.Convert.ToInt32(var1[1])*i)).ToString() + " " + var1[2] + " " +
                            (System.Convert.ToInt32(var2[0])+(System.Convert.ToInt32(var2[1])*(amm-i-1))).ToString() + " " + var2[2] + ";";
        }
        optionResult = optionResult.Remove(optionResult.Length-1) + ")";
        orig = orig.Remove(os,oe-os+"%/opt%".Length).Insert(os,optionResult);
        return orig;
    }

    private void UpdateSpellEffect(Spell spell)
    {
        for(int i = 0;i < spell.effect.Count; i++)
        {
            if (spell.effect[i].Contains("%EMM%")) spell.effect[i] = spell.effect[i].Replace("%EMM%",((MAGvalue-10)/2+EMMB).ToString());
            if (spell.effect[i].Contains("%EMMh%")) spell.effect[i] = spell.effect[i].Replace("%EMMh%",(((MAGvalue-10)/2+EMMB)/2).ToString());
            if (spell.effect[i].Contains("%lvl%")) spell.effect[i] = spell.effect[i].Replace("%lvl%",(spell.level+spell.lvlBonus).ToString());
            if (spell.effect[i].Contains("%lvlm%")) spell.effect[i] = spell.effect[i].Replace("%lvlm%",(Math.Max(spell.level,1)+spell.lvlBonus).ToString());
            if (spell.effect[i].Contains("%lvlmh%")) spell.effect[i] = spell.effect[i].Replace("%lvlmh%", (System.Convert.ToDouble(1+spell.lvlBonus+Math.Max(spell.level,1))/2).ToString());        
            if (spell.effect[i].Contains("%srb%")) spell.effect[i] = spell.effect[i].Replace("%srb", skillBonus.ToString());
            if (spell.effect[i].Contains("%l0%")) spell.effect[i] = DoLevelDepend(spell.effect[i],spell.level);
            if (spell.effect[i].Contains("%eld%")) spell.effect[i] = DoElementalDamage(spell.effect[i]);
            while (spell.effect[i].Contains("%el%")) spell.effect[i] = DoElemental(spell.effect[i]);
            while (spell.effect[i].Contains("%d%")) spell.effect[i] = DoDam(spell.effect[i],spell.damBonus);
            while (spell.effect[i].Contains("%quad%")) spell.effect[i] = DoQuad(spell.effect[i]);
            while (spell.effect[i].Contains("%add%")) spell.effect[i] = DoAdd(spell.effect[i]); 
            while (spell.effect[i].Contains("%pow%")) spell.effect[i] = DoPow(spell.effect[i]);        
            while (spell.effect[i].Contains("%mult%")) spell.effect[i] = DoMult(spell.effect[i]); 
            while (spell.effect[i].Contains("%max%")) spell.effect[i] = DoMax(spell.effect[i]);
            while (spell.effect[i].Contains("%min%")) spell.effect[i] = DoMin(spell.effect[i]);
            while (spell.effect[i].Contains("%opt%")) spell.effect[i] = DoOption(spell.effect[i]);    
        }
    }

    private EffectKeyword returnEffectByName(string effectname)
    {
        if (effects != null)
        {
            foreach(EffectKeyword effect in effects)
                if (effect.name == effectname)
                    return effect;
        }
        return null;
    }

    private SpellModifier returnSpellModifierByName(string modifiername)
    {
        if (spellmods != null)
        {
            foreach(SpellModifier modifier in spellmods)
                if (modifier.name == modifiername)
                    return modifier;
        }
        return null;
    }

    private int spellHasEffect(string effect)
    {
        if (spell.effects == null)
            return -1;
        for(int i = 0; i < spell.effects.Count; i++)
            if (spell.effects[i].name == effect)
                return i;
        return -1;
    }

    private bool spellHas(string[] effects)
    {
        if (spell.effects == null)
                return false;
        foreach(string effect in effects)
        {
            for(int i = 0; i < spell.modifiers.Count; i++)
                if (spell.modifiers[i].name == effect)
                    return true;
            for(int i = 0; i < spell.effects.Count; i++)
                if (spell.effects[i].name == effect )
                    return true;
        }
        return false;
    }

    private int spellHasEffectAmmount(string effect)
    {
        if (spell.effects == null)
            return 0;
        for(int i = 0; i < spell.effects.Count; i++)
            if (spell.effects[i].name == effect)
                return spell.effects[i].ammount;
        return 0;
    }

    private bool SpellHasEffectNonUnique()
    {
        foreach(EffectKeyword effect in spell.effects)
            if(!effect.unique)
                return true;
        return false;
    }

    private int spellHasModifier(string modifier)
    {
        if (spell.modifiers == null)
            return -1;
        for(int i = 0; i < spell.modifiers.Count; i++)
            if (spell.modifiers[i].name == modifier)
                return i;
        return -1;
    }

    private int spellHasModifierAmmount(string modifier)
    {
        if (spell.modifiers == null)
            return 0;
        for(int i = 0; i < spell.modifiers.Count; i++)
            if (spell.modifiers[i].name == modifier)
                return spell.modifiers[i].ammount;
        return 0;
    }

    private async Task AddEffect(MouseEventArgs e, string effectname)
    {
        EffectKeyword newEffect = returnEffectByName(effectname).Clone();
        if (newEffect == null)
            return;
        int ei = spellHasEffect(newEffect.name);
        if (ei > -1)
            spell.effects[ei].ammount += 1;
        else
        {
            spell.effects.Add(newEffect);
            spell.effects.Last().ammount = 1;
        }
        UpdateSpellInfo();
        showMode = 0;
    }

    private async Task RemoveEffect(MouseEventArgs e, string effectname)
    {
        int ei = spellHasEffect(effectname);
        if (ei == -1)
            return;
        if (spell.effects[ei].ammount > 1) spell.effects[ei].ammount--;
        else spell.effects.Remove(spell.effects[ei]);
        UpdateSpellInfo();
        showMode = 0;
    }

    private async Task AddSpellModifier(MouseEventArgs e, string modname)
    {
        SpellModifier newModifier = returnSpellModifierByName(modname).Clone();
        if (newModifier == null)
            return;
        int ei = spellHasModifier(newModifier.name);
        if (ei > -1)
            spell.modifiers[ei].ammount += 1;
        else
        {
            spell.modifiers.Add(newModifier);
            spell.modifiers.Last().ammount = 1;
        }
        UpdateSpellInfo();
        showMode = 0;
    }

    private async Task RemoveSpellModifier(MouseEventArgs e, string modname)
    {
        int ei = spellHasModifier(modname);
        if (ei == -1)
            return;
        if (spell.modifiers[ei].ammount > 1) spell.modifiers[ei].ammount--;
        else spell.modifiers.Remove(spell.modifiers[ei]);
        UpdateSpellInfo();
        showMode = 0;
    }

    private async Task UpdateParams(string value, int type)
    {
        int newValue = System.Convert.ToInt32(value);
        switch(type)
        {
            case 1: MAGvalue = newValue; break;
            case 2: THMvalue = newValue; break;
            case 3: EMMB = newValue; break;
            case 4: spell.level = newValue; break;
            default: return;
        }
        UpdateSpellInfo();
    }

    private async Task NormalizeParams()
    {
        MAGvalue = Math.Max(Math.Min(MAGvalue,99),0);
        THMvalue = Math.Max(Math.Min(THMvalue,99),0);
        EMMB = Math.Max(Math.Min(EMMB,99),-99);
        spell.level = Math.Max(Math.Min(spell.level,6),0);
    }

    private async Task UpdateBools(object value, int type)
    {
        bool newValue = System.Convert.ToBoolean(value);
        switch(type)
        {
            case 1: hasDestructive = newValue; break;
            case 2: isPersonal = newValue; break;
            default: return;
        }
        UpdateSpellInfo();
    }

    private async Task UpdateSpellInfo()
    {   
        await NormalizeParams();
        while (spell.effects.Count > Math.Max(1,spell.level))
            spell.effects.Remove(spell.effects.Last());
        if (spell.effects.Count + spell.modifiers.Count > 0) blockSelection = true; else blockSelection = false;
        spell.manacost = 5*spell.level;
        spell.castDC = 10+4*spell.level;
        spell.pointBonus = 0;
        if (isPersonal)
            spell.pointBonus++;
        spell.pointmax = 3+spell.level+spell.pointBonus;
        spell.pointcost = 0;
        spell.targetType = 0;
        spell.rangeType = 0;
        spell.damBonus = 0;
        spell.lvlBonus = 0;
        spell.effect = new List<string>();
        string bonusEffect = "";
        spell.modifiers.Sort((p,q) => p.name.CompareTo(q.name));
        foreach(SpellModifier mod in spell.modifiers)
        {
            string []? all_mods = mod.modifiers.Split(";");
            foreach(string mod_pair in all_mods)
            {
                string[]? mod_parms = mod_pair.Split(":");
                string value;
                switch(mod_parms[1].Trim())
                {
                    case "amm": value = mod.ammount.ToString(); break;
                    default: value = mod_parms[1].Trim(); break;
                }
                switch(mod_parms[0].Trim())
                {
                    case "level": spell.lvlBonus += System.Convert.ToInt32(value); break;
                    case "damagesize": spell.damBonus += System.Convert.ToInt32(value); break;
                    case "range": spell.rangeType = Math.Max(System.Convert.ToInt32(value),spell.rangeType); break;
                    case "target": spell.targetType = Math.Max(System.Convert.ToInt32(value),spell.targetType); break;
                    case "description": bonusEffect += value.Replace("%amm%",mod.ammount.ToString()); break;
                    default: break;
                }
            }
            spell.pointcost += mod.GetCost(mod.ammount, true, spell.level);
        }
        spell.effects.Sort((p, q) => p.name.CompareTo(q.name));
        foreach(EffectKeyword effect in spell.effects)
        {
            spell.pointcost += effect.GetCost(effect.ammount,true,spell.level);
            spell.effect.Add(effect.description.Replace("%amm%",effect.ammount.ToString()).Replace(",","."));
        }
        spell.effect.Add(bonusEffect);
        if (hasDestructive && spell.school == "Destruction") spell.damBonus++;
        if (isPersonal) {spell.rangeType = -1; spell.targetType = -1;};
        UpdateSpellEffect(spell);                
        InvokeAsync(StateHasChanged);
    }

    private async Task ClearSpell(MouseEventArgs e)
    {
        spell = new Spell();
        blockSelection = false;
    }
}
